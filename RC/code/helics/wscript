def configure(conf):
    conf.env['LIBPATH_HELICS'] = ['/usr/local/lib']
    conf.env['LIB_HELICS'] = ['helicsSharedLib']
    conf.env['LIB_JSONCPP'] = ['jsoncpp']
    conf.env['ENABLE_HELICS'] = True

def build(bld):
    # Build the HELICS module without any additional examples
    module = bld.create_ns3_module('helics', ['core', 'network', 'internet'])
    module.use.extend(['HELICS', 'JSONCPP'])
    # Explicitly link the HELICS shared library so that symbols such as
    # helics::loadTimeFromString are resolved correctly at link time.
    module.lib = ['helicsSharedLib']
    module.source = [
        'model/helics-application.cc',
        'model/helics-static-source-application.cc',
        'model/helics-static-sink-application.cc',
        'model/helics-filter-application.cc',
        'model/helics-id-tag.cc',
        'model/helics-simulator-impl.cc',
        'helper/helics-helper.cc',
        'model/helics.cc',
    ]
    # Link against the installed HELICS library
    # Expect libhelicsSharedLib.so to be installed
    module.env.append_value('LIBPATH', ['/usr/local/lib'])
    module.env.append_value('LIB', ['helicsSharedLib', 'jsoncpp'])
    # module.env.append_value('LIB', 'helics')
    # Tell the linker where to find libhelics

    headers = bld(features='ns3header')
    headers.module = 'helics'
    headers.source = [
        'model/helics-application.h',
        'model/helics-static-source-application.h',
        'model/helics-static-sink-application.h',
        'model/helics-filter-application.h',
        'model/helics-id-tag.h',
        'model/helics-simulator-impl.h',
        'helper/helics-helper.h',
        'model/helics.h',
    ]
