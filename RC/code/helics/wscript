# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

def configure(conf):
    """Configure HELICS and JSONCPP library paths."""
    helics_paths = ['/usr/local/lib', '/usr/lib']
    conf.check_cxx(lib='helicsSharedLib', libpath=helics_paths,
                   uselib_store='HELICS', mandatory=True)
    conf.check_cxx(lib='jsoncpp', libpath=helics_paths,
                   uselib_store='JSONCPP', mandatory=True)
    conf.env['ENABLE_HELICS'] = True


def build(bld):
    """Build the helics ns-3 module with Modbus support."""
    module = bld.create_ns3_module('helics', ['core', 'network', 'internet'])
    module.use = ['HELICS', 'JSONCPP']
    # Explicitly link against HELICS in case waf does not pick up the
    # configuration from the use variables.
    module.lib = ['helicsSharedLib']
    module.env.append_value('LIBPATH', ['/usr/local/lib', '/usr/lib'])
    module.env.append_value('LIB', ['helicsSharedLib', 'jsoncpp'])
    module.source = [
        'model/helics-application.cc',
        'model/helics-static-source-application.cc',
        'model/helics-static-sink-application.cc',
        'model/helics-filter-application.cc',
        'model/helics-id-tag.cc',
        'model/helics-simulator-impl.cc',
        'helper/helics-helper.cc',
        'model/helics.cc',
        '../../../patch/modbus/helper/modbus-helper.cc',
        '../../../patch/modbus/model/modbus-master-app.cc',
        '../../../patch/modbus/model/modbus-slave-app.cc',
    ]

    headers = bld(features='ns3header')
    headers.module = 'helics'
    headers.source = [
        'model/helics-application.h',
        'model/helics-static-source-application.h',
        'model/helics-static-sink-application.h',
        'model/helics-filter-application.h',
        'model/helics-id-tag.h',
        'model/helics-simulator-impl.h',
        'helper/helics-helper.h',
        'model/helics.h',
    ]
